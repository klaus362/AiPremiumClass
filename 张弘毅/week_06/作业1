import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import os

# 数据集路径
train_dir = 'path/to/dataset/train'
test_dir = 'path/to/dataset/test'

# 加载和预处理数据集
batch_size = 32
img_height = 128
img_width = 128

train_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    train_dir,
    validation_split=0.2,
    subset="training",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size)

validation_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    train_dir,
    validation_split=0.2,
    subset="validation",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size)

test_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    test_dir,
    image_size=(img_height, img_width),
    batch_size=batch_size)

# 数据集归一化
normalization_layer = layers.Rescaling(1./255)
train_dataset = train_dataset.map(lambda x, y: (normalization_layer(x), y))
validation_dataset = validation_dataset.map(lambda x, y: (normalization_layer(x), y))
test_dataset = test_dataset.map(lambda x, y: (normalization_layer(x), y))

# 创建模型
def create_model(rnn_type):
    model = models.Sequential([
        layers.Resizing(img_height, img_width),
        layers.Rescaling(1./255),
        layers.Conv2D(32, 3, activation='relu'),
        layers.MaxPooling2D(),
        layers.Conv2D(64, 3, activation='relu'),
        layers.MaxPooling2D(),
        layers.Flatten(),
        layers.Dense(128, activation='relu'),
        layers.Reshape((128, 1)),  # 重塑为适合RNN的输入格式
    ])
    
    if rnn_type == 'LSTM':
        model.add(layers.LSTM(64))
    elif rnn_type == 'GRU':
        model.add(layers.GRU(64))
    
    model.add(layers.Dense(len(train_dataset.class_names), activation='softmax'))
    
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    return model

# 使用不同的RNN结构
lstm_model = create_model('LSTM')
gru_model = create_model('GRU')

# TensorBoard 回调
log_dir = "logs/fit/"
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)

# 训练模型
lstm_model.fit(
    train_dataset,
    validation_data=validation_dataset,
    epochs=10,
    callbacks=[tensorboard_callback])

gru_model.fit(
    train_dataset,
    validation_data=validation_dataset,
    epochs=10,
    callbacks=[tensorboard_callback])

# 评估模型
lstm_accuracy = lstm_model.evaluate(test_dataset)
gru_accuracy = gru_model.evaluate(test_dataset)

print(f"LSTM模型测试集准确率: {lstm_accuracy[1]:.2f}")
print(f"GRU模型测试集准确率: {gru_accuracy[1]:.2f}")

# 可视化
%load_ext tensorboard
%tensorboard --logdir logs/fit
