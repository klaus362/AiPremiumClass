import torch
import torch.nn as nn
import math
import matplotlib.pyplot as plt

# 位置编码模块
class PositionalEncoding(nn.Module):
    def __init__(self, emb_size, max_len=5000, dropout=0.5):
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p=dropout)
        
        pe = torch.zeros(max_len, emb_size)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, emb_size, 2).float() * (-math.log(10000.0) / emb_size)
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0).transpose(0, 1)  # (max_len, 1, emb_size)
        self.register_buffer('pe', pe)
    
    def forward(self, x):
        x = x + self.pe[:x.size(0), :]
        return self.dropout(x)

# 多头注意力模块
class MultiHeadAttention(nn.Module):
    def __init__(self, emb_size, num_heads, dropout=0.5):
        super(MultiHeadAttention, self).__init__()
        self.emb_size = emb_size
        self.num_heads = num_heads
        self.head_size = emb_size // num_heads
        
        assert self.head_size * num_heads == emb_size, "emb_size必须可被num_heads整除"
        
        self.q_linear = nn.Linear(emb_size, emb_size)
        self.k_linear = nn.Linear(emb_size, emb_size)
        self.v_linear = nn.Linear(emb_size, emb_size)
        
        self.dropout = nn.Dropout(dropout)
        self.out_linear = nn.Linear(emb_size, emb_size)
    
    def forward(self, query, key, value, mask=None):
        seq_len = query.size(0)
        batch_size = query.size(1)
        
        # 线性变换
        q = self.q_linear(query)
        k = self.k_linear(key)
        v = self.v_linear(value)
        
        # 分头并调整维度
        q = q.view(seq_len, batch_size, self.num_heads, self.head_size).permute(1, 2, 0, 3)
        k = k.view(seq_len, batch_size, self.num_heads, self.head_size).permute(1, 2, 0, 3)
        v = v.view(seq_len, batch_size, self.num_heads, self.head_size).permute(1, 2, 0, 3)
        
        # 计算注意力分数
        scores = torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.head_size)
        if mask is not None:
            scores = scores.masked_fill(mask == 0, -1e9)
        
        attn_weights = torch.softmax(scores, dim=-1)
        attn_weights = self.dropout(attn_weights)
        
        # 应用注意力到value
        attn_output = torch.matmul(attn_weights, v)
        
        # 合并多头
        attn_output = attn_output.permute(2, 0, 1, 3).contiguous()
        attn_output = attn_output.view(seq_len, batch_size, self.emb_size)
        
        # 输出线性层
        output = self.out_linear(attn_output)
        return output

# 前馈网络模块
class FeedForward(nn.Module):
    def __init__(self, emb_size, hidden_size, dropout=0.5):
        super(FeedForward, self).__init__()
        self.linear1 = nn.Linear(emb_size, hidden_size)
        self.linear2 = nn.Linear(hidden_size, emb_size)
        self.dropout = nn.Dropout(dropout)
        self.relu = nn.ReLU()
    
    def forward(self, x):
        x = self.linear1(x)
        x = self.relu(x)
        x = self.dropout(x)
        x = self.linear2(x)
        return x

# 编码器层
class TransformerEncoderLayer(nn.Module):
    def __init__(self, emb_size, num_heads, ff_hidden_size, dropout=0.5):
        super(TransformerEncoderLayer, self).__init__()
        self.self_attn = MultiHeadAttention(emb_size, num_heads, dropout)
        self.ffn = FeedForward(emb_size, ff_hidden_size, dropout)
        self.norm1 = nn.LayerNorm(emb_size)
        self.norm2 = nn.LayerNorm(emb_size)
        self.dropout1 = nn.Dropout(dropout)
        self.dropout2 = nn.Dropout(dropout)
    
    def forward(self, src, src_mask=None):
        # 自注意力子层
        attn_output = self.self_attn(src, src, src, src_mask)
        src = src + self.dropout1(attn_output)
        src = self.norm1(src)
        
        # 前馈网络子层
        ffn_output = self.ffn(src)
        src = src + self.dropout2(ffn_output)
        src = self.norm2(src)
        return src

# 编码器
class TransformerEncoder(nn.Module):
    def __init__(self, num_layers, emb_size, num_heads, ff_hidden_size, dropout):
        super(TransformerEncoder, self).__init__()
        self.layers = nn.ModuleList([
            TransformerEncoderLayer(emb_size, num_heads, ff_hidden_size, dropout)
            for _ in range(num_layers)
        ])
    
    def forward(self, src, mask=None):
        for layer in self.layers:
            src = layer(src, mask)
        return src

# 完整Transformer模型
class TransformerModel(nn.Module):
    def __init__(self, vocab_size, emb_size, max_len, num_layers, num_heads, ff_hidden_size, dropout, num_classes):
        super(TransformerModel, self).__init__()
        self.embedding = nn.Embedding(vocab_size, emb_size)
        self.pos_encoder = PositionalEncoding(emb_size, max_len, dropout)
        self.encoder = TransformerEncoder(num_layers, emb_size, num_heads, ff_hidden_size, dropout)
        self.fc = nn.Linear(emb_size, num_classes)
        self.pool = lambda x: x.mean(dim=0)  # 序列维度平均池化
    
    def forward(self, src, src_mask=None):
        src_emb = self.embedding(src)  # (seq_len, batch, emb_size)
        src_emb = self.pos_encoder(src_emb)
        encoded = self.encoder(src_emb, src_mask)
        pooled = self.pool(encoded)
        output = self.fc(pooled)
        return output

# 参数设置
emb_size = 200
dropout = 0.5
maxlen = 5000
vocab_size = 200
num_classes = 10
num_layers = 3
num_heads = 4
ff_hidden_size = 800

# 实例化模型
model = TransformerModel(
    vocab_size=vocab_size,
    emb_size=emb_size,
    max_len=maxlen,
    num_layers=num_layers,
    num_heads=num_heads,
    ff_hidden_size=ff_hidden_size,
    dropout=dropout,
    num_classes=num_classes
)

# 模拟数据
n_samples = 1000
seq_len = 200
batch_size = 32
X = torch.randint(0, vocab_size, (n_samples, seq_len))
y = torch.randint(0, num_classes, (n_samples,))

# 数据加载器
from torch.utils.data import DataLoader, TensorDataset
dataset = TensorDataset(X, y)
dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)

# 训练设置
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = model.to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# 训练循环
num_epochs = 10
for epoch in range(num_epochs):
    model.train()
    total_loss = 0
    for batch_X, batch_y in dataloader:
        batch_X = batch_X.transpose(0, 1).to(device)  # 转为(seq_len, batch_size)
        batch_y = batch_y.to(device)
        
        optimizer.zero_grad()
        outputs = model(batch_X)
        loss = criterion(outputs, batch_y)
        loss.backward()
        optimizer.step()
        
        total_loss += loss.item()
    
    avg_loss = total_loss / len(dataloader)
    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {avg_loss:.4f}')

# 保存模型
torch.save(model.state_dict(), 'transformer_model.pth')
print("模型已保存为 transformer_model.pth")
